// Generated by gencpp from file scout_deeplearning/identify.msg
// DO NOT EDIT!


#ifndef SCOUT_DEEPLEARNING_MESSAGE_IDENTIFY_H
#define SCOUT_DEEPLEARNING_MESSAGE_IDENTIFY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scout_deeplearning
{
template <class ContainerAllocator>
struct identify_
{
  typedef identify_<ContainerAllocator> Type;

  identify_()
    : results()
    , classes(0)
    , area(0)
    , position()
    , acc(0.0)
    , image_number(0)  {
      position.assign(0.0);
  }
  identify_(const ContainerAllocator& _alloc)
    : results(_alloc)
    , classes(0)
    , area(0)
    , position()
    , acc(0.0)
    , image_number(0)  {
  (void)_alloc;
      position.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _results_type;
  _results_type results;

   typedef int8_t _classes_type;
  _classes_type classes;

   typedef int32_t _area_type;
  _area_type area;

   typedef boost::array<float, 4>  _position_type;
  _position_type position;

   typedef float _acc_type;
  _acc_type acc;

   typedef int32_t _image_number_type;
  _image_number_type image_number;





  typedef boost::shared_ptr< ::scout_deeplearning::identify_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scout_deeplearning::identify_<ContainerAllocator> const> ConstPtr;

}; // struct identify_

typedef ::scout_deeplearning::identify_<std::allocator<void> > identify;

typedef boost::shared_ptr< ::scout_deeplearning::identify > identifyPtr;
typedef boost::shared_ptr< ::scout_deeplearning::identify const> identifyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scout_deeplearning::identify_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scout_deeplearning::identify_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scout_deeplearning::identify_<ContainerAllocator1> & lhs, const ::scout_deeplearning::identify_<ContainerAllocator2> & rhs)
{
  return lhs.results == rhs.results &&
    lhs.classes == rhs.classes &&
    lhs.area == rhs.area &&
    lhs.position == rhs.position &&
    lhs.acc == rhs.acc &&
    lhs.image_number == rhs.image_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scout_deeplearning::identify_<ContainerAllocator1> & lhs, const ::scout_deeplearning::identify_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scout_deeplearning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::scout_deeplearning::identify_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_deeplearning::identify_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_deeplearning::identify_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_deeplearning::identify_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_deeplearning::identify_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_deeplearning::identify_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scout_deeplearning::identify_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6053d8d260d6714b1da39ebe6fbf86b";
  }

  static const char* value(const ::scout_deeplearning::identify_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6053d8d260d6714ULL;
  static const uint64_t static_value2 = 0xb1da39ebe6fbf86bULL;
};

template<class ContainerAllocator>
struct DataType< ::scout_deeplearning::identify_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scout_deeplearning/identify";
  }

  static const char* value(const ::scout_deeplearning::identify_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scout_deeplearning::identify_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string results\n"
"int8 classes\n"
"int32 area\n"
"float32[4] position\n"
"float32 acc\n"
"int32 image_number\n"
;
  }

  static const char* value(const ::scout_deeplearning::identify_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scout_deeplearning::identify_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.results);
      stream.next(m.classes);
      stream.next(m.area);
      stream.next(m.position);
      stream.next(m.acc);
      stream.next(m.image_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct identify_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scout_deeplearning::identify_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scout_deeplearning::identify_<ContainerAllocator>& v)
  {
    s << indent << "results: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.results);
    s << indent << "classes: ";
    Printer<int8_t>::stream(s, indent + "  ", v.classes);
    s << indent << "area: ";
    Printer<int32_t>::stream(s, indent + "  ", v.area);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "acc: ";
    Printer<float>::stream(s, indent + "  ", v.acc);
    s << indent << "image_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCOUT_DEEPLEARNING_MESSAGE_IDENTIFY_H
