// Generated by gencpp from file scout_deeplearning/img.msg
// DO NOT EDIT!


#ifndef SCOUT_DEEPLEARNING_MESSAGE_IMG_H
#define SCOUT_DEEPLEARNING_MESSAGE_IMG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scout_deeplearning
{
template <class ContainerAllocator>
struct img_
{
  typedef img_<ContainerAllocator> Type;

  img_()
    : img()  {
    }
  img_(const ContainerAllocator& _alloc)
    : img(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _img_type;
  _img_type img;





  typedef boost::shared_ptr< ::scout_deeplearning::img_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scout_deeplearning::img_<ContainerAllocator> const> ConstPtr;

}; // struct img_

typedef ::scout_deeplearning::img_<std::allocator<void> > img;

typedef boost::shared_ptr< ::scout_deeplearning::img > imgPtr;
typedef boost::shared_ptr< ::scout_deeplearning::img const> imgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scout_deeplearning::img_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scout_deeplearning::img_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scout_deeplearning::img_<ContainerAllocator1> & lhs, const ::scout_deeplearning::img_<ContainerAllocator2> & rhs)
{
  return lhs.img == rhs.img;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scout_deeplearning::img_<ContainerAllocator1> & lhs, const ::scout_deeplearning::img_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scout_deeplearning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::scout_deeplearning::img_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_deeplearning::img_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_deeplearning::img_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_deeplearning::img_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_deeplearning::img_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_deeplearning::img_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scout_deeplearning::img_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06c52dd5e482fac9219b8508a9f9cc99";
  }

  static const char* value(const ::scout_deeplearning::img_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06c52dd5e482fac9ULL;
  static const uint64_t static_value2 = 0x219b8508a9f9cc99ULL;
};

template<class ContainerAllocator>
struct DataType< ::scout_deeplearning::img_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scout_deeplearning/img";
  }

  static const char* value(const ::scout_deeplearning::img_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scout_deeplearning::img_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[] img\n"
;
  }

  static const char* value(const ::scout_deeplearning::img_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scout_deeplearning::img_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.img);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct img_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scout_deeplearning::img_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scout_deeplearning::img_<ContainerAllocator>& v)
  {
    s << indent << "img[]" << std::endl;
    for (size_t i = 0; i < v.img.size(); ++i)
    {
      s << indent << "  img[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.img[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCOUT_DEEPLEARNING_MESSAGE_IMG_H
